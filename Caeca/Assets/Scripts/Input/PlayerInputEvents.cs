//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Caeca.Input
{
    public partial class @PlayerInputEvents : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInputEvents()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Base"",
            ""id"": ""c21e53e7-20f9-44c2-ab53-c974f57e4f96"",
            ""actions"": [
                {
                    ""name"": ""DirectOrient"",
                    ""type"": ""Button"",
                    ""id"": ""723c3c94-fbff-4eac-9b33-51989f0902f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SetSonar"",
                    ""type"": ""Button"",
                    ""id"": ""239a5e95-401e-4135-bb2b-dbcb43281626"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShowSonar"",
                    ""type"": ""Button"",
                    ""id"": ""ce7e94a6-ed3c-46da-b3ed-ba82d6e01e12"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c8f470a2-be82-44cb-b854-6bf8fec4df70"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""DirectOrient"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c17dc90-469c-4444-a7f2-d61894b5354f"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""SetSonar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e727d1e2-cb1c-4fc9-af1a-a13abf7ddad9"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""ShowSonar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyMouse"",
            ""bindingGroup"": ""KeyMouse"",
            ""devices"": []
        }
    ]
}");
            // Base
            m_Base = asset.FindActionMap("Base", throwIfNotFound: true);
            m_Base_DirectOrient = m_Base.FindAction("DirectOrient", throwIfNotFound: true);
            m_Base_SetSonar = m_Base.FindAction("SetSonar", throwIfNotFound: true);
            m_Base_ShowSonar = m_Base.FindAction("ShowSonar", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Base
        private readonly InputActionMap m_Base;
        private IBaseActions m_BaseActionsCallbackInterface;
        private readonly InputAction m_Base_DirectOrient;
        private readonly InputAction m_Base_SetSonar;
        private readonly InputAction m_Base_ShowSonar;
        public struct BaseActions
        {
            private @PlayerInputEvents m_Wrapper;
            public BaseActions(@PlayerInputEvents wrapper) { m_Wrapper = wrapper; }
            public InputAction @DirectOrient => m_Wrapper.m_Base_DirectOrient;
            public InputAction @SetSonar => m_Wrapper.m_Base_SetSonar;
            public InputAction @ShowSonar => m_Wrapper.m_Base_ShowSonar;
            public InputActionMap Get() { return m_Wrapper.m_Base; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(BaseActions set) { return set.Get(); }
            public void SetCallbacks(IBaseActions instance)
            {
                if (m_Wrapper.m_BaseActionsCallbackInterface != null)
                {
                    @DirectOrient.started -= m_Wrapper.m_BaseActionsCallbackInterface.OnDirectOrient;
                    @DirectOrient.performed -= m_Wrapper.m_BaseActionsCallbackInterface.OnDirectOrient;
                    @DirectOrient.canceled -= m_Wrapper.m_BaseActionsCallbackInterface.OnDirectOrient;
                    @SetSonar.started -= m_Wrapper.m_BaseActionsCallbackInterface.OnSetSonar;
                    @SetSonar.performed -= m_Wrapper.m_BaseActionsCallbackInterface.OnSetSonar;
                    @SetSonar.canceled -= m_Wrapper.m_BaseActionsCallbackInterface.OnSetSonar;
                    @ShowSonar.started -= m_Wrapper.m_BaseActionsCallbackInterface.OnShowSonar;
                    @ShowSonar.performed -= m_Wrapper.m_BaseActionsCallbackInterface.OnShowSonar;
                    @ShowSonar.canceled -= m_Wrapper.m_BaseActionsCallbackInterface.OnShowSonar;
                }
                m_Wrapper.m_BaseActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @DirectOrient.started += instance.OnDirectOrient;
                    @DirectOrient.performed += instance.OnDirectOrient;
                    @DirectOrient.canceled += instance.OnDirectOrient;
                    @SetSonar.started += instance.OnSetSonar;
                    @SetSonar.performed += instance.OnSetSonar;
                    @SetSonar.canceled += instance.OnSetSonar;
                    @ShowSonar.started += instance.OnShowSonar;
                    @ShowSonar.performed += instance.OnShowSonar;
                    @ShowSonar.canceled += instance.OnShowSonar;
                }
            }
        }
        public BaseActions @Base => new BaseActions(this);
        private int m_KeyMouseSchemeIndex = -1;
        public InputControlScheme KeyMouseScheme
        {
            get
            {
                if (m_KeyMouseSchemeIndex == -1) m_KeyMouseSchemeIndex = asset.FindControlSchemeIndex("KeyMouse");
                return asset.controlSchemes[m_KeyMouseSchemeIndex];
            }
        }
        public interface IBaseActions
        {
            void OnDirectOrient(InputAction.CallbackContext context);
            void OnSetSonar(InputAction.CallbackContext context);
            void OnShowSonar(InputAction.CallbackContext context);
        }
    }
}
