//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Caeca.Input
{
    public partial class @PlayerInputEvents : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInputEvents()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Base"",
            ""id"": ""c21e53e7-20f9-44c2-ab53-c974f57e4f96"",
            ""actions"": [
                {
                    ""name"": ""Orient"",
                    ""type"": ""Button"",
                    ""id"": ""723c3c94-fbff-4eac-9b33-51989f0902f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sonar"",
                    ""type"": ""Button"",
                    ""id"": ""ce7e94a6-ed3c-46da-b3ed-ba82d6e01e12"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Focus"",
                    ""type"": ""Button"",
                    ""id"": ""ee6095d3-a65f-4de6-8049-1137c5d13d35"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FocusSwitch"",
                    ""type"": ""Value"",
                    ""id"": ""2ef496b7-94c0-44b6-aa19-704cf8bf71be"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c8f470a2-be82-44cb-b854-6bf8fec4df70"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Orient"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e727d1e2-cb1c-4fc9-af1a-a13abf7ddad9"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Sonar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0fbbade-04da-4966-b7e2-a7d660dc147a"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""Focus"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""12ce2d0e-7d26-4b6b-b187-1f8c8603fc35"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyMouse"",
                    ""action"": ""FocusSwitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyMouse"",
            ""bindingGroup"": ""KeyMouse"",
            ""devices"": []
        }
    ]
}");
            // Base
            m_Base = asset.FindActionMap("Base", throwIfNotFound: true);
            m_Base_Orient = m_Base.FindAction("Orient", throwIfNotFound: true);
            m_Base_Sonar = m_Base.FindAction("Sonar", throwIfNotFound: true);
            m_Base_Focus = m_Base.FindAction("Focus", throwIfNotFound: true);
            m_Base_FocusSwitch = m_Base.FindAction("FocusSwitch", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Base
        private readonly InputActionMap m_Base;
        private IBaseActions m_BaseActionsCallbackInterface;
        private readonly InputAction m_Base_Orient;
        private readonly InputAction m_Base_Sonar;
        private readonly InputAction m_Base_Focus;
        private readonly InputAction m_Base_FocusSwitch;
        public struct BaseActions
        {
            private @PlayerInputEvents m_Wrapper;
            public BaseActions(@PlayerInputEvents wrapper) { m_Wrapper = wrapper; }
            public InputAction @Orient => m_Wrapper.m_Base_Orient;
            public InputAction @Sonar => m_Wrapper.m_Base_Sonar;
            public InputAction @Focus => m_Wrapper.m_Base_Focus;
            public InputAction @FocusSwitch => m_Wrapper.m_Base_FocusSwitch;
            public InputActionMap Get() { return m_Wrapper.m_Base; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(BaseActions set) { return set.Get(); }
            public void SetCallbacks(IBaseActions instance)
            {
                if (m_Wrapper.m_BaseActionsCallbackInterface != null)
                {
                    @Orient.started -= m_Wrapper.m_BaseActionsCallbackInterface.OnOrient;
                    @Orient.performed -= m_Wrapper.m_BaseActionsCallbackInterface.OnOrient;
                    @Orient.canceled -= m_Wrapper.m_BaseActionsCallbackInterface.OnOrient;
                    @Sonar.started -= m_Wrapper.m_BaseActionsCallbackInterface.OnSonar;
                    @Sonar.performed -= m_Wrapper.m_BaseActionsCallbackInterface.OnSonar;
                    @Sonar.canceled -= m_Wrapper.m_BaseActionsCallbackInterface.OnSonar;
                    @Focus.started -= m_Wrapper.m_BaseActionsCallbackInterface.OnFocus;
                    @Focus.performed -= m_Wrapper.m_BaseActionsCallbackInterface.OnFocus;
                    @Focus.canceled -= m_Wrapper.m_BaseActionsCallbackInterface.OnFocus;
                    @FocusSwitch.started -= m_Wrapper.m_BaseActionsCallbackInterface.OnFocusSwitch;
                    @FocusSwitch.performed -= m_Wrapper.m_BaseActionsCallbackInterface.OnFocusSwitch;
                    @FocusSwitch.canceled -= m_Wrapper.m_BaseActionsCallbackInterface.OnFocusSwitch;
                }
                m_Wrapper.m_BaseActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Orient.started += instance.OnOrient;
                    @Orient.performed += instance.OnOrient;
                    @Orient.canceled += instance.OnOrient;
                    @Sonar.started += instance.OnSonar;
                    @Sonar.performed += instance.OnSonar;
                    @Sonar.canceled += instance.OnSonar;
                    @Focus.started += instance.OnFocus;
                    @Focus.performed += instance.OnFocus;
                    @Focus.canceled += instance.OnFocus;
                    @FocusSwitch.started += instance.OnFocusSwitch;
                    @FocusSwitch.performed += instance.OnFocusSwitch;
                    @FocusSwitch.canceled += instance.OnFocusSwitch;
                }
            }
        }
        public BaseActions @Base => new BaseActions(this);
        private int m_KeyMouseSchemeIndex = -1;
        public InputControlScheme KeyMouseScheme
        {
            get
            {
                if (m_KeyMouseSchemeIndex == -1) m_KeyMouseSchemeIndex = asset.FindControlSchemeIndex("KeyMouse");
                return asset.controlSchemes[m_KeyMouseSchemeIndex];
            }
        }
        public interface IBaseActions
        {
            void OnOrient(InputAction.CallbackContext context);
            void OnSonar(InputAction.CallbackContext context);
            void OnFocus(InputAction.CallbackContext context);
            void OnFocusSwitch(InputAction.CallbackContext context);
        }
    }
}
